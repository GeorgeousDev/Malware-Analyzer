import pefile
import os
import hashlib
import json
from malware_signature_db import malware_signatures

class AdvancedMalwareAnalyzer:

    def __init__(self, filepath):
        self.filepath = filepath
        self.pe = pefile.PE(filepath)

    def compute_file_hash(self):
        sha256_hash = hashlib.sha256()
        with open(self.filepath, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

    def get_sections(self):
        sections = [(section.Name.decode(errors='ignore'), section.SizeOfRawData)
                    for section in self.pe.sections]
        return sections

    def get_imports(self):
        imports = []
        for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
            dll = entry.dll.decode(errors='ignore')
            for imp in entry.imports:
                imports.append((dll, imp.name.decode(errors='ignore')))
        return imports

    def check_malware_signature(self):
        file_hash = self.compute_file_hash()
        if file_hash in malware_signatures:
            return malware_signatures[file_hash]
        return None

    def analyze(self):
        print(f"Analyzing file: {os.path.basename(self.filepath)}")
        print("\nSections:")
        for name, size in self.get_sections():
            print(f"{name}: {size} bytes")

        print("\nImports:")
        for dll, func in self.get_imports():
            print(f"{dll}: {func}")

        malware = self.check_malware_signature()
        if malware:
            print(f"\nDetected malware: {malware}")

        print("\nGenerating report...")
        report = {
            "filename": os.path.basename(self.filepath),
            "sections": self.get_sections(),
            "imports": self.get_imports(),
            "malware": malware
        }
        with open("report.json", "w") as outfile:
            json.dump(report, outfile, indent=4)
        print("Report generated.")

# Usage
analyzer = AdvancedMalwareAnalyzer('path/to/file.exe')
analyzer.analyze()
